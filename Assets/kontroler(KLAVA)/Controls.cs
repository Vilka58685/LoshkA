//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/kontroler(KLAVA)/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""girl with knife"",
            ""id"": ""e0d0dc2f-738c-4217-b3a3-0def23ff04d0"",
            ""actions"": [
                {
                    ""name"": ""Moment"",
                    ""type"": ""Value"",
                    ""id"": ""934b8910-eec4-4840-8da9-c97a76fc6f6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d3066ee9-b795-478d-8ba3-c5fef639b6d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kortochki"",
                    ""type"": ""Button"",
                    ""id"": ""04141cab-a0dc-4bf5-9419-c566162d68d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Polzat"",
                    ""type"": ""Button"",
                    ""id"": ""2fbabfa1-41c0-4954-bd88-05921e14e51e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1d3d0f30-5dbd-42be-9a41-d78c33197eeb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dcbd1837-6c29-4105-8be3-f25964f30b58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9b4c627e-e4f8-43d2-b188-81bedefd7924"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""27d43eb1-5b07-4ae8-8bca-574e6ffc6252"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cafa1bea-47cf-414f-9272-a111e4fcb41d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c1a06e92-8f25-4331-8e77-43e3fb7a61e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f891a5a9-edb9-4b5d-a066-24bbcbe60464"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kortochki"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0ee60c-36b9-42e4-9872-dd80a021ff14"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Polzat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // girl with knife
        m_girlwithknife = asset.FindActionMap("girl with knife", throwIfNotFound: true);
        m_girlwithknife_Moment = m_girlwithknife.FindAction("Moment", throwIfNotFound: true);
        m_girlwithknife_Jump = m_girlwithknife.FindAction("Jump", throwIfNotFound: true);
        m_girlwithknife_Kortochki = m_girlwithknife.FindAction("Kortochki", throwIfNotFound: true);
        m_girlwithknife_Polzat = m_girlwithknife.FindAction("Polzat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // girl with knife
    private readonly InputActionMap m_girlwithknife;
    private List<IGirlwithknifeActions> m_GirlwithknifeActionsCallbackInterfaces = new List<IGirlwithknifeActions>();
    private readonly InputAction m_girlwithknife_Moment;
    private readonly InputAction m_girlwithknife_Jump;
    private readonly InputAction m_girlwithknife_Kortochki;
    private readonly InputAction m_girlwithknife_Polzat;
    public struct GirlwithknifeActions
    {
        private @Controls m_Wrapper;
        public GirlwithknifeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moment => m_Wrapper.m_girlwithknife_Moment;
        public InputAction @Jump => m_Wrapper.m_girlwithknife_Jump;
        public InputAction @Kortochki => m_Wrapper.m_girlwithknife_Kortochki;
        public InputAction @Polzat => m_Wrapper.m_girlwithknife_Polzat;
        public InputActionMap Get() { return m_Wrapper.m_girlwithknife; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GirlwithknifeActions set) { return set.Get(); }
        public void AddCallbacks(IGirlwithknifeActions instance)
        {
            if (instance == null || m_Wrapper.m_GirlwithknifeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GirlwithknifeActionsCallbackInterfaces.Add(instance);
            @Moment.started += instance.OnMoment;
            @Moment.performed += instance.OnMoment;
            @Moment.canceled += instance.OnMoment;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Kortochki.started += instance.OnKortochki;
            @Kortochki.performed += instance.OnKortochki;
            @Kortochki.canceled += instance.OnKortochki;
            @Polzat.started += instance.OnPolzat;
            @Polzat.performed += instance.OnPolzat;
            @Polzat.canceled += instance.OnPolzat;
        }

        private void UnregisterCallbacks(IGirlwithknifeActions instance)
        {
            @Moment.started -= instance.OnMoment;
            @Moment.performed -= instance.OnMoment;
            @Moment.canceled -= instance.OnMoment;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Kortochki.started -= instance.OnKortochki;
            @Kortochki.performed -= instance.OnKortochki;
            @Kortochki.canceled -= instance.OnKortochki;
            @Polzat.started -= instance.OnPolzat;
            @Polzat.performed -= instance.OnPolzat;
            @Polzat.canceled -= instance.OnPolzat;
        }

        public void RemoveCallbacks(IGirlwithknifeActions instance)
        {
            if (m_Wrapper.m_GirlwithknifeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGirlwithknifeActions instance)
        {
            foreach (var item in m_Wrapper.m_GirlwithknifeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GirlwithknifeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GirlwithknifeActions @girlwithknife => new GirlwithknifeActions(this);
    public interface IGirlwithknifeActions
    {
        void OnMoment(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnKortochki(InputAction.CallbackContext context);
        void OnPolzat(InputAction.CallbackContext context);
    }
}
